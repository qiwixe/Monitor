@page "/Archive"
@using ClosedXML.Excel
@using hybr.Shared.Services
@inject IJSRuntime JS
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName+".xlsx";
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
</script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"/>
    <script>
    function saveAsImage() {
    var element = document.getElementById("graph");
    html2canvas(element).then(function (canvas) {
    var link = document.createElement("a");
    document.body.appendChild(link);
    link.download = "123.png";
    link.href = canvas.toDataURL("image/png");
    link.target = '_blank';
    link.click();
    });
    }
</script>

<Preload />
<Grid Style="height:100%" @ref=@UpdateGrid.AllUpdateGrid["Archive"] TItem="Sensor" DataProvider="UpdateGrid.DataProvider">
    <Tabs @ref="stations" @onclick="Select" NavStyle="NavStyle.Underline" OnShown="@(args => OnStationTabShow(args))">
        @foreach (var (_key, _value) in ValueSettings.Stations){
            <Tab Name=@_key.ToString() Title=@_value.Title>
                <Content>
                    <Tabs @ref="sensors[_key]" @onclick="Select" NavStyle="NavStyle.Underline" OnShown="@(args => OnSensorTabShow(args))" >
                        @foreach (var _id in ValueSettings.Stations[_key].SensorsId){
                            <Tab Name=@_id.ToString() Title=@ValueSettings.Sensors[_id].Title Disabled=sensorsPageState[_key]/>
                        }
                    </Tabs>            
                </Content>
            </Tab>
        }
        <Tab Name="0" Title="Свой фильтр" onclick="OnShowModalClick"/>
    </Tabs>
    <Tabs @onclick="Select" @ref="data" NavStyle="NavStyle.Underline" OnShown="@(args => OnDataTabShow(args))">
        <Tab Title="Сутки" Disabled=sensorsPageState[0]/>
        <Tab Title="Месяц" Disabled=sensorsPageState[0]/>
        <Tab Title="Год" Disabled=sensorsPageState[0]/>
    </Tabs>
    <div class="btn-group">
        <Button Color="ButtonColor.Light" @onclick="() => ChangeData(-1)">«</Button>
        <input type="@InputType" @bind-value="@InputDataValue" @onchange="() => Select()" @bind-value:event="oninput"/>
        <Button Color="ButtonColor.Light" @onclick="() => ChangeData(+1)">»</Button>
        <Button Color="ButtonColor.Primary" @onclick="OnShowOffcanvasClick">Таблица Данных</Button>
        <Button Color="ButtonColor.Primary" onclick="saveAsImage()">Сохранить график</Button>
    </div>
    <Offcanvas @ref="offcanvas" Title="Таблица данных" Size="OffcanvasSize.Large">
        <BodyTemplate>
            <Grid 
            @ref=@UpdateGrid.AllUpdateDataGrid["Archive"]
            TItem="Order"
            Class="table table-hover"
            DataProvider="DataArchive"
            AllowPaging="true"
            PageSize="20">
                <GridColumns>
                    <GridColumn TItem="Order" HeaderText="Дата">
                        @context.Date_of_m
                    </GridColumn>
                    <GridColumn TItem="Order" HeaderText="Время">
                        @context.Time_of_m
                    </GridColumn>
                    <GridColumn TItem="Order" HeaderText="Значение">
                        @context.Value_of_m
                    </GridColumn>
                </GridColumns>
            </Grid>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="() => offcanvas.HideAsync()">Закрыть</Button>
            <Button Color="ButtonColor.Secondary" @onclick="SaveDataClick">Сохранить таблицу</Button>
        </FooterTemplate>
    </Offcanvas>
    <Modal @ref="modal" title="Свой фильтр" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge">
        <BodyTemplate>
            <Tabs @ref="stations" @onclick="Select" NavStyle="NavStyle.Underline" OnShown="@(args => OnStationTabShow(args))">
                @foreach (var (_key, _value) in ValueSettings.Stations){
                    <Tab Name=@_key.ToString() Title=@_value.Title>
                        <Content>
                            @foreach (var _id in ValueSettings.Stations[_key].SensorsId){
                                <CheckboxInput Label=@ValueSettings.Sensors[_id].Title @bind-Value="_selected_sensor_id[_id]" />
                            }         
                        </Content>
                    </Tab>
                }
            </Tabs>
            С
            <input type="@InputTypeCustom" @bind-value="@InputDataValuefilter1" max="@DateTime.Now.ToString("yyyy-MM-dd")"/>
            До
            <input type="@InputTypeCustom" @bind-value="@InputDataValuefilter2" max="@DateTime.Now.ToString("yyyy-MM-dd")"/>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Выйти</Button>
            <Button Color="ButtonColor.Primary" @onclick="SelectFilter">Поиск</Button>
        </FooterTemplate>
    </Modal>
    <LineChart id="graph" @ref=LiveChartElement.ChartArchive Width="100" WidthUnit="Unit.Percentage" Height="50" HeightUnit="Unit.Percentage" />
</Grid>
@code {
    private Dictionary<int,bool> _selected_sensor_id = ValueSettings.Sensors.ToDictionary(x => x.Key, x => false);
    private string InputType = "date";
    private string InputTypeCustom = "date";
    private string InputDataValue = DateTime.Now.ToString("yyyy-MM-dd");
    private string InputDataValuefilter1 = DateTime.Now.ToString("yyyy-MM-dd");
    private string InputDataValuefilter2 = DateTime.Now.ToString("yyyy-MM-dd");
    private string fileName = "fileName";
    private Tabs data  = default!,stations = default!;
    private Dictionary<int, bool> sensorsPageState = new Dictionary<int, bool>
    {
        [0] = true,
        [1] = true,
        [2] = true,
        [3] = true,
        [4] = true,
        [5] = true,
        [6] = true,
        [7] = true,
    };
    private Dictionary<int, Tabs> sensors = new Dictionary<int, Tabs>
    {
        [1] = default!,
        [2] = default!,
        [3] = default!,
        [4] = default!,
        [5] = default!,
        [6] = default!,
        [7] = default!,
    }; 
    private Modal modal = default!;
    private Offcanvas offcanvas = default!;
    private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now);
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LiveChartElement.PageProperty("Archive");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task<GridDataProviderResult<Order>> DataArchive(GridDataProviderRequest<Order> request) => await Task.FromResult(request.ApplyTo(DataBase.DataArchive));
    private async Task OnShowOffcanvasClick() => await offcanvas.ShowAsync();
    private async Task SaveDataClick() => await DownloadFileFromStream(DataBase.DataArchive);
    private async Task OnShowModalClick() => await modal.ShowAsync();
    private async Task OnHideModalClick() => await modal.HideAsync();
    private async Task DownloadFileFromStream(List<Order> _lastData)
    {
        var workbook = new XLWorkbook();
        workbook.AddWorksheet("Страница1");
        var ws = workbook.Worksheet("Страница1");
        ws.Cell("A1").Value = "Дата";
        ws.Cell("B1").Value = "Время";
        ws.Cell("C1").Value = ValueSettings.Sensors[_lastData[0].Sensor_id].Title;
        for (var i = 0; i < _lastData.Count; i++)
        {
            ws.Cell("A" + (i + 2).ToString()).Value = _lastData[i].Date_of_m;
            ws.Cell("B" + (i + 2).ToString()).Value = _lastData[i].Time_of_m;
            ws.Cell("C" + (i + 2).ToString()).Value = _lastData[i].Value_of_m;
        }
        Stream fs = new MemoryStream();
        workbook.SaveAs(fs);
        fs.Position = 0;
        using var streamRef = new DotNetStreamReference(stream: fs);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private int activeStationTabId;
    private int activeSensorTabId;
    private string? activeDataTabTitle;
    private async void OnStationTabShow(TabsEventArgs args) {
        activeStationTabId = Int32.Parse(args.ActiveTabName);
        foreach(var (_key,_value) in sensorsPageState){
            if (activeStationTabId == _key) sensorsPageState[activeStationTabId] = false; 
            else { 
                sensorsPageState[_key] = true; 
                activeSensorTabId = 0; 
            }
        }
        sensorsPageState[0] = true; 
        activeDataTabTitle = null;
        await UpdateGrid.AllUpdateGrid["Archive"].RefreshDataAsync();
    }
    private async void OnSensorTabShow(TabsEventArgs args){
        activeSensorTabId = Int32.Parse(args.ActiveTabName);
        sensorsPageState[0] = false;
        await UpdateGrid.AllUpdateGrid["Archive"].RefreshDataAsync();
    } 
    private void OnDataTabShow(TabsEventArgs args)
    {
        activeDataTabTitle = args.ActiveTabTitle;
        if(activeDataTabTitle == "Сутки"){
            InputType = "date";
            InputDataValue = date1.ToString("yyyy-MM-dd");
        }
        if (activeDataTabTitle == "Месяц"){
            InputType = "month";
            InputDataValue = date1.ToString("yyyy-MM");
        }
        if(activeDataTabTitle == "Год"){
            InputType = "number";
            InputDataValue = date1.ToString("yyyy");
        }
    }
    private void ChangeData(int _type){
        switch(activeDataTabTitle){
            case("Сутки"):{
                    InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture).AddDays(_type).ToString("yyyy-MM-dd");
                    break;
                }
            case("Месяц"):{
                    InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM",System.Globalization.CultureInfo.InvariantCulture).AddMonths(_type).ToString("yyyy-MM");
                    break;
                }
            case("Год"):{
                    InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy",System.Globalization.CultureInfo.InvariantCulture).AddYears(_type).ToString("yyyy");
                    break;
                }
        }
        Select();
    }
    private async void Select(){
        await Task.Delay(10);
        if(activeStationTabId != 0 && activeSensorTabId != 0)
            switch(activeDataTabTitle){
                case("Сутки"):{
                        await ChartUpdate(DataBase.CreateSQLstring(activeStationTabId,activeSensorTabId,InputDataValue,InputDataValue+" 23:59:59"));
                        break;
                    }
                case("Месяц"):{
                        await ChartUpdate(DataBase.CreateSQLstring(activeStationTabId,activeSensorTabId,InputDataValue+"-01",InputDataValue+"-31  23:59:59"));
                        break;
                    }
                case("Год"):{
                        await ChartUpdate(DataBase.CreateSQLstring(activeStationTabId,activeSensorTabId,InputDataValue+"-01-01",InputDataValue+"-12-31 23:59:59"));
                        break;
                    }
            }
    }
    private async void SelectFilter(){
        await modal.HideAsync();
        await ChartUpdate(DataBase.CreateSQLstring(activeStationTabId,_selected_sensor_id,InputDataValuefilter1,InputDataValuefilter2));
    }
    private async Task ChartUpdate(string _data){
        Console.WriteLine(_data);
        PreloadService.Show(SpinnerColor.Light, "Синхронизация...");
        DataBase.DataArchive = await DataBase.Data(_data);
        await UpdateGrid.AllUpdateDataGrid["Archive"].RefreshDataAsync();
        GlobalPageProperty.UpdateDataArchive(DataBase.DataArchive);
        PreloadService.Hide();
    }
}
