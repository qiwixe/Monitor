@page "/Archive"
@using ClosedXML.Excel
@using hybr.Shared.Services
@inject IJSRuntime JS
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName+".xlsx";
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
</script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script>
    function saveAsImage() {
    var element = document.getElementById("graph");
    html2canvas(element).then(function (canvas) {
    var link = document.createElement("a");
    document.body.appendChild(link);
    link.download = "123.png";
    link.href = canvas.toDataURL("image/png");
    link.target = '_blank';
    link.click();
    });
    }
</script>

<Preload />
<Tabs OnShown="@(args => OnSensorTabShow(args))">
    @foreach (var (_key, _value) in ValueSettings.Stations){
        <Tab Title=@_value.Title>
            <Content>
                <Tabs OnShown="@(args => OnDataTabShow(args))">
                    <Tab Title="Сутки" Disabled=@(dayTab[_key])/>
                    <Tab Title="Месяц" Disabled=@(monthTab[_key])/>
                    <Tab Title="Год" Disabled=@(yearTab[_key])/>
                </Tabs>
            </Content>
        </Tab>
    }
    <Tab Title="Свой фильтр" onclick="OnShowModalClick">
        <Content>
        </Content>
    </Tab>
</Tabs>
<div class="btn-group">
    <Button Color="ButtonColor.Light" @onclick="() => DecreaseData()">«</Button>
    <input type="@InputType" @bind-value="@InputDataValue" @onchange="() => SectedData()" @bind-value:event="oninput"/>
    <Button Color="ButtonColor.Light" @onclick="() => IncreaseData()">»</Button>
    <Button Color="ButtonColor.Primary" @onclick="OnShowOffcanvasClick">Таблица Данных</Button>
    <Button Color="ButtonColor.Primary" onclick="saveAsImage()">Сохранить график</Button>
</div>
<Offcanvas @ref="offcanvas" Title="Таблица данных" Size="OffcanvasSize.Large">
    <BodyTemplate>
        <Grid 
        @ref=@UpdateGrid.AllUpdateDataGrid["Archive"]
        TItem="Order"
        Class="table table-hover"
        DataProvider="DataArchive"
        AllowPaging="true"

        PageSize="20">
            <GridColumns>
                <GridColumn TItem="Order" HeaderText="Дата">
                    @context.Date_of_m
                </GridColumn>
                <GridColumn TItem="Order" HeaderText="Время">
                    @context.Time_of_m
                </GridColumn>
                <GridColumn TItem="Order" HeaderText="Значение">
                    @context.Value_of_m
                </GridColumn>
            </GridColumns>
        </Grid>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="() => offcanvas.HideAsync()">Закрыть</Button>
        <Button Color="ButtonColor.Secondary" @onclick="SaveDataClick">Сохранить таблицу</Button>
    </FooterTemplate>
</Offcanvas>
<Modal @ref="modal" title="Modal title" IsVerticallyCentered="true">
    <BodyTemplate>
        This is a vertically centered modal.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>
<LineChart id="graph" @ref=LiveChartElement.MeteorologicalChartTemperatureArchive Width="100" WidthUnit="Unit.Percentage" Height="50" HeightUnit="Unit.Percentage" />
@code {
    private static Dictionary<int, bool> dayTab = new() {[1] = false,[2] = true,[3] = true,[4] = true,[5] = true,[6] = true,[7] = true};
    private static Dictionary<int, bool> monthTab = new() {[1] = false,[2] = true,[3] = true,[4] = true,[5] = true,[6] = true,[7] = true};
    private static Dictionary<int, bool> yearTab = new() {[1] = false,[2] = true,[3] = true,[4] = true,[5] = true,[6] = true,[7] = true};
    private string InputType = "date";
    private string InputDataValue = DateTime.Now.ToString("yyyy-MM-dd");
    private string fileName = "fileName";
    private Modal modal;
    private Offcanvas offcanvas;
    private DateOnly date1;
    private DateOnly date2;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    protected override void OnInitialized()
    {
        modal = default!;
        offcanvas = default!;
        date1 = DateOnly.FromDateTime(DateTime.Now);
    }
    private async Task<GridDataProviderResult<Order>> DataArchive(GridDataProviderRequest<Order> request) => await Task.FromResult(request.ApplyTo(DataBase.DataArchive));
    private async Task OnShowOffcanvasClick() => await offcanvas.ShowAsync();
    private async Task SaveDataClick() => await DownloadFileFromStream(DataBase.DataArchive);
    private async Task OnShowModalClick() => await modal.ShowAsync();
    private async Task OnHideModalClick() => await modal.HideAsync();

    private async Task DownloadFileFromStream(List<Order> _lastData)
    {
        var workbook = new XLWorkbook();
        workbook.AddWorksheet("Страница1");
        var ws = workbook.Worksheet("Страница1");
        ws.Cell("A1").Value = "Дата";
        ws.Cell("B1").Value = "Время";
        ws.Cell("C1").Value = SensorData.AllSensors[_lastData[0].Sensor_id].Title;
        for (var i = 0; i < _lastData.Count; i++)
        {
            ws.Cell("A" + (i + 2).ToString()).Value = _lastData[i].Date_of_m;
            ws.Cell("B" + (i + 2).ToString()).Value = _lastData[i].Time_of_m;
            ws.Cell("C" + (i + 2).ToString()).Value = _lastData[i].Value_of_m;
        }
        Stream fs = new MemoryStream();
        workbook.SaveAs(fs);
        fs.Position = 0;
        using var streamRef = new DotNetStreamReference(stream: fs);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LiveChartElement.PageProperty("Archive");
            PreloadService.Show(SpinnerColor.Light, "Синхронизация...");
            await Task.Delay(1300);
            PreloadService.Hide();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private int activeStationTab;
    private string? activeDataTabTitle;
    private void OnSensorTabShow(TabsEventArgs args)
    {
        foreach(var (_key,_value) in ValueSettings.Stations){
            if(_value.Title == args.ActiveTabTitle){
                activeStationTab = _key;
                dayTab[_key] = false;
                monthTab[_key] = false;
                yearTab[_key] = false;
            }else{
                dayTab[_key] = true;
                monthTab[_key] = true;
                yearTab[_key] = true;
            }
        }
    }
    private void OnDataTabShow(TabsEventArgs args)
    {
        activeDataTabTitle = args.ActiveTabTitle;
        if(activeDataTabTitle == "Сутки"){
            InputType = "date";
            InputDataValue = date1.ToString("yyyy-MM-dd");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab, ValueSettings.Stations[activeStationTab].SensorsId[0], InputDataValue));
        }
        if (activeDataTabTitle == "Месяц"){
            InputType = "month";
            InputDataValue = date1.ToString("yyyy-MM");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01",InputDataValue+"-31"));
        }
        if(activeDataTabTitle == "Год"){
            InputType = "number";
            InputDataValue = date1.ToString("yyyy");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"01-01",InputDataValue+"12-31"));
        }
    }
    private async Task DecreaseData()
    {
        if(activeDataTabTitle == "Сутки"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture).AddDays(-1).ToString("yyyy-MM-dd");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue));
        }
        if (activeDataTabTitle == "Месяц"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM",System.Globalization.CultureInfo.InvariantCulture).AddMonths(-1).ToString("yyyy-MM");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01",InputDataValue+"-31"));
        }
        if(activeDataTabTitle == "Год"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy",System.Globalization.CultureInfo.InvariantCulture).AddYears(-1).ToString("yyyy");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01-01",InputDataValue+"-12-31"));
        }
    }
    private async Task SectedData()
    {
        if(activeDataTabTitle == "Сутки"){
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue));
        }
        if (activeDataTabTitle == "Месяц"){
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01",InputDataValue+"-31"));
        }
        if(activeDataTabTitle == "Год"){
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01-01",InputDataValue+"-12-31"));
        }
    }
    private async Task IncreaseData()
    {
        if(activeDataTabTitle == "Сутки"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture).AddDays(+1).ToString("yyyy-MM-dd");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue));
        }
        if (activeDataTabTitle == "Месяц"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy-MM",System.Globalization.CultureInfo.InvariantCulture).AddMonths(+1).ToString("yyyy-MM");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01",InputDataValue+"-31"));
        }
        if(activeDataTabTitle == "Год"){
            InputDataValue = DateTime.ParseExact(InputDataValue, "yyyy",System.Globalization.CultureInfo.InvariantCulture).AddYears(+1).ToString("yyyy");
            ChartUpdate(DataBase.CreateSQLstring(activeStationTab,ValueSettings.Stations[activeStationTab].SensorsId[0],InputDataValue+"-01-01",InputDataValue+"-12-31"));
        }
    }
    private async Task ChartUpdate(string _data){
        PreloadService.Show(SpinnerColor.Light, "Синхронизация...");
        DataBase.DataArchive = await DataBase.Data(_data);
        await UpdateGrid.AllUpdateDataGrid["Archive"].RefreshDataAsync();
        GlobalPageProperty.UpdateDataArchive(DataBase.DataArchive);
        PreloadService.Hide();
    }
}
