@page "/"

@using hybr.Shared.Services
<PageTitle>Home</PageTitle>
<Preload />
<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800" />
</div>
<Grid @ref=@UpdateGrid.AllUpdateGrid["Home"] TItem="Sensor" DataProvider="DataProvider">
    <Alert Color="@GlobalSensorData.AllSensors[1].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[1].Icon" class="me-2"></Icon>Датчик 1 @GlobalSensorData.AllSensors[1].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[2].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[2].Icon" class="me-2"></Icon>Датчик 2 @GlobalSensorData.AllSensors[2].Value_of_m, B</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[3].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[3].Icon" class="me-2"></Icon>Датчик 3 @GlobalSensorData.AllSensors[3].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[4].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[4].Icon" class="me-2"></Icon>Датчик 4 @GlobalSensorData.AllSensors[4].Value_of_m, B</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[5].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[5].Icon" class="me-2"></Icon>Датчик 5 @GlobalSensorData.AllSensors[5].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[6].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[6].Icon" class="me-2"></Icon>Датчик 6 @GlobalSensorData.AllSensors[6].Value_of_m, B</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[7].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[7].Icon" class="me-2"></Icon>Датчик 7 @GlobalSensorData.AllSensors[7].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[8].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[8].Icon" class="me-2"></Icon>Датчик 8 @GlobalSensorData.AllSensors[8].Value_of_m, B</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[9].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[9].Icon" class="me-2"></Icon>Датчик 9 @GlobalSensorData.AllSensors[9].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[10].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[10].Icon" class="me-2"></Icon>Датчик 10 @GlobalSensorData.AllSensors[10].Value_of_m, B</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[11].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[11].Icon" class="me-2"></Icon>Датчик 11 @GlobalSensorData.AllSensors[11].Value_of_m, A</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[12].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[12].Icon" class="me-2"></Icon>Датчик 12 @GlobalSensorData.AllSensors[12].Value_of_m, B</Alert>

    <Alert Color="@GlobalSensorData.AllSensors[103].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[103].Icon" class="me-2"></Icon>Датчик температуры воздуха @GlobalSensorData.AllSensors[103].Value_of_m, °C</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[104].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[104].Icon" class="me-2"></Icon>Датчик влажности воздуха @GlobalSensorData.AllSensors[104].Value_of_m, %</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[105].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[105].Icon" class="me-2"></Icon>Датчик давления @GlobalSensorData.AllSensors[105].Value_of_m, мм.рт.ст.</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[106].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[106].Icon" class="me-2"></Icon>Датчик направления ветра @GlobalSensorData.AllSensors[106].Value_of_m, °</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[107].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[107].Icon" class="me-2"></Icon>Датчик скорости ветра @GlobalSensorData.AllSensors[107].Value_of_m, м/с</Alert>
    <Alert Color="@GlobalSensorData.AllSensors[108].Alert" Dismissable="false"> <Icon Name="@GlobalSensorData.AllSensors[108].Icon" class="me-2"></Icon>Датчик солнечной радиации @GlobalSensorData.AllSensors[108].Value_of_m, Вт/м2</Alert>
</Grid>
<Grid   TItem="Order"
Class="table table-hover table-bordered table-striped"
DataProvider="DataProviderSQL"
AllowPaging="true"
PageSize="10">

    <GridColumns>
        <GridColumn TItem="Order" HeaderText="Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="sensor_id">
            @context.Sensor_id
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="station_id">
            @context.Station_id
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="date_of_m">
            @context.Date_of_m
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="time_of_m">
            @context.Time_of_m
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="value_of_m">
            @context.Value_of_m
        </GridColumn>
        <GridColumn TItem="Order" HeaderText="unit_of_m">
            @context.Unit_of_m
        </GridColumn>
    </GridColumns>

</Grid>
@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private async Task<GridDataProviderResult<Order>> DataProviderSQL(GridDataProviderRequest<Order> request){
        return await Task.FromResult(request.ApplyTo(GlobalData.DataAll));
    }
    private async Task<GridDataProviderResult<Sensor>> DataProvider(GridDataProviderRequest<Sensor> request)
    {
        return await Task.FromResult(request.ApplyTo(new List<Sensor>(new Sensor[1])));
    }
}

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount;
    private int labelsCount;

    private Random random = new();

    protected override void OnInitialized()
    {
        chartData = new ChartData { Labels = GetDefaultDataLabels(6), Datasets = GetDefaultDataSets(3) };
        lineChartOptions = new()
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        PreloadService.Show(SpinnerColor.Light, "Синхронизация...");
        await Task.Delay(1300);
        PreloadService.Hide();
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
        LiveChartElement.PageProperty("Home");
        TimerUpdate.StartTimer();
    }

    private async Task RandomizeAsync()
    {
        if (chartData is null || chartData.Datasets is null || !chartData.Datasets.Any()) return;

        var newDatasets = new List<IChartDataset>();

        foreach (var dataset in chartData.Datasets)
        {
            if (dataset is LineChartDataset lineChartDataset
                && lineChartDataset is not null
                && lineChartDataset.Data is not null)
            {
                var count = lineChartDataset.Data.Count;

                var newData = new List<double?>();
                for (var i = 0; i < count; i++)
                {
                    newData.Add(random.Next(200));
                }

                lineChartDataset.Data = newData;
                newDatasets.Add(lineChartDataset);
            }
        }

        chartData.Datasets = newDatasets;

        await lineChart.UpdateValuesAsync(chartData);
    }

    private async Task AddDatasetAsync()
    {
        if (chartData is null || chartData.Datasets is null) return;

        var chartDataset = GetRandomLineChartDataset();
        chartData = await lineChart.AddDatasetAsync(chartData, chartDataset, lineChartOptions);
    }

    private async Task AddDataAsync()
    {
        if (chartData is null || chartData.Datasets is null)
            return;

        var data = new List<IChartDatasetData>();
        foreach (var dataset in chartData.Datasets)
        {
            if (dataset is LineChartDataset lineChartDataset)
                data.Add(new LineChartDatasetData(lineChartDataset.Label, random.Next(200)));
        }

        chartData = await lineChart.AddDataAsync(chartData, GetNextDataLabel(), data);
    }

    private async Task ShowHorizontalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "y";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    private async Task ShowVerticalLineChartAsync()
    {
        lineChartOptions.IndexAxis = "x";
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetRandomLineChartDataset());
        }

        return datasets;
    }

    private LineChartDataset GetRandomLineChartDataset()
    {
        var c = ColorUtility.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        return new LineChartDataset
            {
                Label = $"Team {datasetsCount}",
                Data = GetRandomData(),
                BackgroundColor = c.ToRgbaString(),
                BorderColor = c.ToRgbString(),
                PointRadius = new List<double> { 5 },
                PointHoverRadius = new List<double> { 8 },
            };
    }

    private List<double?> GetRandomData()
    {
        var data = new List<double?>();
        for (var index = 0; index < labelsCount; index++)
        {
            data.Add(random.Next(200));
        }

        return data;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(GetNextDataLabel());
        }

        return labels;
    }

    private string GetNextDataLabel()
    {
        labelsCount += 1;
        return $"Day {labelsCount}";
    }

    #endregion Data Preparation
}
